/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  RequestRandomnessParams,
  requestRandomnessParamsBeet,
} from '../types/RequestRandomnessParams'

/**
 * @category Instructions
 * @category RequestRandomness
 * @category generated
 */
export type RequestRandomnessInstructionArgs = {
  params: RequestRandomnessParams
}
/**
 * @category Instructions
 * @category RequestRandomness
 * @category generated
 */
export const requestRandomnessStruct = new beet.BeetArgsStruct<
  RequestRandomnessInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', requestRandomnessParamsBeet],
  ],
  'RequestRandomnessInstructionArgs'
)
/**
 * Accounts required by the _requestRandomness_ instruction
 *
 * @property [_writable_] stakePool
 * @property [_writable_] vrf
 * @property [_writable_] oracleQueue
 * @property [_writable_] queueAuthority
 * @property [_writable_] dataBuffer
 * @property [_writable_] permission
 * @property [_writable_] escrow
 * @property [_writable_] programState
 * @property [] switchboardProgram
 * @property [_writable_] payerWallet
 * @property [**signer**] payerAuthority
 * @property [] recentBlockhashes
 * @category Instructions
 * @category RequestRandomness
 * @category generated
 */
export type RequestRandomnessInstructionAccounts = {
  stakePool: web3.PublicKey
  vrf: web3.PublicKey
  oracleQueue: web3.PublicKey
  queueAuthority: web3.PublicKey
  dataBuffer: web3.PublicKey
  permission: web3.PublicKey
  escrow: web3.PublicKey
  programState: web3.PublicKey
  switchboardProgram: web3.PublicKey
  payerWallet: web3.PublicKey
  payerAuthority: web3.PublicKey
  recentBlockhashes: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const requestRandomnessInstructionDiscriminator = [
  213, 5, 173, 166, 37, 236, 31, 18,
]

/**
 * Creates a _RequestRandomness_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RequestRandomness
 * @category generated
 */
export function createRequestRandomnessInstruction(
  accounts: RequestRandomnessInstructionAccounts,
  args: RequestRandomnessInstructionArgs,
  programId = new web3.PublicKey('654kE3ccD76txX3nrP8Q2FTxjD82qk6XrcoJZYZ1cess')
) {
  const [data] = requestRandomnessStruct.serialize({
    instructionDiscriminator: requestRandomnessInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vrf,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oracleQueue,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.queueAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.dataBuffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.permission,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.programState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payerWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payerAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.recentBlockhashes,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
