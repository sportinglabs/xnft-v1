/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ConsumeRandomnessParams,
  consumeRandomnessParamsBeet,
} from '../types/ConsumeRandomnessParams'

/**
 * @category Instructions
 * @category ConsumeRandomness
 * @category generated
 */
export type ConsumeRandomnessInstructionArgs = {
  params: ConsumeRandomnessParams
}
/**
 * @category Instructions
 * @category ConsumeRandomness
 * @category generated
 */
export const consumeRandomnessStruct = new beet.BeetArgsStruct<
  ConsumeRandomnessInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', consumeRandomnessParamsBeet],
  ],
  'ConsumeRandomnessInstructionArgs'
)
/**
 * Accounts required by the _consumeRandomness_ instruction
 *
 * @property [_writable_] stakePool
 * @property [] vrf
 * @category Instructions
 * @category ConsumeRandomness
 * @category generated
 */
export type ConsumeRandomnessInstructionAccounts = {
  stakePool: web3.PublicKey
  vrf: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const consumeRandomnessInstructionDiscriminator = [
  190, 217, 49, 162, 99, 26, 73, 234,
]

/**
 * Creates a _ConsumeRandomness_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ConsumeRandomness
 * @category generated
 */
export function createConsumeRandomnessInstruction(
  accounts: ConsumeRandomnessInstructionAccounts,
  args: ConsumeRandomnessInstructionArgs,
  programId = new web3.PublicKey('654kE3ccD76txX3nrP8Q2FTxjD82qk6XrcoJZYZ1cess')
) {
  const [data] = consumeRandomnessStruct.serialize({
    instructionDiscriminator: consumeRandomnessInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vrf,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
